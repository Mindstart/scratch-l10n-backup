{
    "boost.color.any": "any color",
    "boost.color.black": "black",
    "boost.color.blue": "blue",
    "boost.color.green": "green",
    "boost.color.red": "red",
    "boost.color.white": "white",
    "boost.color.yellow": "yellow",
    "boost.getMotorPosition": "motor [MOTOR_REPORTER_ID] position",
    "boost.getTiltAngle": "tilt angle [TILT_DIRECTION]",
    "boost.motorDirection.backward": "that way",
    "boost.motorDirection.forward": "this way",
    "boost.motorDirection.reverse": "reverse",
    "boost.motorOff": "turn motor [MOTOR_ID] off",
    "boost.motorOn": "turn motor [MOTOR_ID] on",
    "boost.motorOnFor": "turn motor [MOTOR_ID] for [DURATION] seconds",
    "boost.motorOnForRotation": "turn motor [MOTOR_ID] for [ROTATION] rotations",
    "boost.seeingColor": "seeing [COLOR] brick?",
    "boost.setLightHue": "set light color to [HUE]",
    "boost.setMotorDirection": "set motor [MOTOR_ID] direction [MOTOR_DIRECTION]",
    "boost.setMotorPower": "set motor [MOTOR_ID] speed to [POWER] %",
    "boost.tiltDirection.any": "any",
    "boost.tiltDirection.down": "down",
    "boost.tiltDirection.left": "left",
    "boost.tiltDirection.right": "right",
    "boost.tiltDirection.up": "up",
    "boost.whenColor": "when [COLOR] brick seen",
    "boost.whenTilted": "when tilted [TILT_DIRECTION_ANY]",
    "ev3.beepNote": "beep note [NOTE] for [TIME] secs",
    "ev3.buttonPressed": "button [PORT] pressed?",
    "ev3.getBrightness": "brightness",
    "ev3.getDistance": "distance",
    "ev3.getMotorPosition": "motor [PORT] position",
    "ev3.motorSetPower": "motor [PORT] set power [POWER] %",
    "ev3.motorTurnClockwise": "motor [PORT] turn this way for [TIME] seconds",
    "ev3.motorTurnCounterClockwise": "motor [PORT] turn that way for [TIME] seconds",
    "ev3.whenBrightnessLessThan": "when brightness < [DISTANCE]",
    "ev3.whenButtonPressed": "when button [PORT] pressed",
    "ev3.whenDistanceLessThan": "when distance < [DISTANCE]",
    "gdxfor.getAcceleration": "acceleration [DIRECTION]",
    "gdxfor.getForce": "force",
    "gdxfor.getSpin": "spin speed [DIRECTION]",
    "gdxfor.getTilt": "tilt angle [TILT]",
    "gdxfor.isFreeFalling": "falling?",
    "gdxfor.isTilted": "tilted [TILT]?",
    "gdxfor.pulled": "pulled",
    "gdxfor.pushed": "pushed",
    "gdxfor.shaken": "shaken",
    "gdxfor.startedFalling": "started falling",
    "gdxfor.tiltDirectionMenu.any": "any",
    "gdxfor.tiltDirectionMenu.back": "back",
    "gdxfor.tiltDirectionMenu.front": "front",
    "gdxfor.tiltDirectionMenu.left": "left",
    "gdxfor.tiltDirectionMenu.right": "right",
    "gdxfor.turnedFaceDown": "turned face down",
    "gdxfor.turnedFaceUp": "turned face up",
    "gdxfor.whenForcePushedOrPulled": "when force sensor [PUSH_PULL]",
    "gdxfor.whenGesture": "when [GESTURE]",
    "gdxfor.whenTilted": "when tilted [TILT]",
    "makeymakey.downArrow": "down arrow",
    "makeymakey.downArrowShort": "down",
    "makeymakey.leftArrow": "left arrow",
    "makeymakey.leftArrowShort": "left",
    "makeymakey.rightArrow": "right arrow",
    "makeymakey.rightArrowShort": "right",
    "makeymakey.spaceKey": "space",
    "makeymakey.upArrow": "up arrow",
    "makeymakey.upArrowShort": "up",
    "makeymakey.whenKeyPressed": "when [KEY] key pressed",
    "makeymakey.whenKeysPressedInOrder": "when [SEQUENCE] pressed in order",
    "microbit.buttonsMenu.any": "any",
    "microbit.clearDisplay": "clear display",
    "microbit.defaultTextToDisplay": "Hello!",
    "microbit.displaySymbol": "display [MATRIX]",
    "microbit.displayText": "display text [TEXT]",
    "microbit.gesturesMenu.jumped": "jumped",
    "microbit.gesturesMenu.moved": "moved",
    "microbit.gesturesMenu.shaken": "shaken",
    "microbit.isButtonPressed": "[BTN] button pressed?",
    "microbit.isTilted": "tilted [DIRECTION]?",
    "microbit.pinStateMenu.off": "off",
    "microbit.pinStateMenu.on": "on",
    "microbit.tiltAngle": "tilt angle [DIRECTION]",
    "microbit.tiltDirectionMenu.any": "any",
    "microbit.tiltDirectionMenu.back": "back",
    "microbit.tiltDirectionMenu.front": "front",
    "microbit.tiltDirectionMenu.left": "left",
    "microbit.tiltDirectionMenu.right": "right",
    "microbit.whenButtonPressed": "when [BTN] button pressed",
    "microbit.whenGesture": "when [GESTURE]",
    "microbit.whenPinConnected": "when pin [PIN] connected",
    "microbit.whenTilted": "when tilted [DIRECTION]",
    "music.categoryName": "Music",
    "music.changeTempo": "change tempo by [TEMPO]",
    "music.drumBass": "(2) Bass Drum",
    "music.drumBongo": "(13) Bongo",
    "music.drumCabasa": "(15) Cabasa",
    "music.drumClaves": "(9) Claves",
    "music.drumClosedHiHat": "(6) Closed Hi-Hat",
    "music.drumConga": "(14) Conga",
    "music.drumCowbell": "(11) Cowbell",
    "music.drumCrashCymbal": "(4) Crash Cymbal",
    "music.drumCuica": "(18) Cuica",
    "music.drumGuiro": "(16) Guiro",
    "music.drumHandClap": "(8) Hand Clap",
    "music.drumOpenHiHat": "(5) Open Hi-Hat",
    "music.drumSideStick": "(3) Side Stick",
    "music.drumSnare": "(1) Snare Drum",
    "music.drumTambourine": "(7) Tambourine",
    "music.drumTriangle": "(12) Triangle",
    "music.drumVibraslap": "(17) Vibraslap",
    "music.drumWoodBlock": "(10) Wood Block",
    "music.getTempo": "tempo",
    "music.instrumentBass": "(6) Bass",
    "music.instrumentBassoon": "(14) Bassoon",
    "music.instrumentCello": "(8) Cello",
    "music.instrumentChoir": "(15) Choir",
    "music.instrumentClarinet": "(10) Clarinet",
    "music.instrumentElectricGuitar": "(5) Electric Guitar",
    "music.instrumentElectricPiano": "(2) Electric Piano",
    "music.instrumentFlute": "(12) Flute",
    "music.instrumentGuitar": "(4) Guitar",
    "music.instrumentMarimba": "(19) Marimba",
    "music.instrumentMusicBox": "(17) Music Box",
    "music.instrumentOrgan": "(3) Organ",
    "music.instrumentPiano": "(1) Piano",
    "music.instrumentPizzicato": "(7) Pizzicato",
    "music.instrumentSaxophone": "(11) Saxophone",
    "music.instrumentSteelDrum": "(18) Steel Drum",
    "music.instrumentSynthLead": "(20) Synth Lead",
    "music.instrumentSynthPad": "(21) Synth Pad",
    "music.instrumentTrombone": "(9) Trombone",
    "music.instrumentVibraphone": "(16) Vibraphone",
    "music.instrumentWoodenFlute": "(13) Wooden Flute",
    "music.midiPlayDrumForBeats": "play drum [DRUM] for [BEATS] beats",
    "music.midiSetInstrument": "set instrument to [INSTRUMENT]",
    "music.playDrumForBeats": "play drum [DRUM] for [BEATS] beats",
    "music.playNoteForBeats": "play note [NOTE] for [BEATS] beats",
    "music.restForBeats": "rest for [BEATS] beats",
    "music.setInstrument": "set instrument to [INSTRUMENT]",
    "music.setTempo": "set tempo to [TEMPO]",
    "pen.categoryName": "Pen",
    "pen.changeColorParam": "change pen [COLOR_PARAM] by [VALUE]",
    "pen.changeHue": "change pen color by [HUE]",
    "pen.changeShade": "change pen shade by [SHADE]",
    "pen.changeSize": "change pen size by [SIZE]",
    "pen.clear": "erase all",
    "pen.colorMenu.brightness": "brightness",
    "pen.colorMenu.color": "color",
    "pen.colorMenu.saturation": "saturation",
    "pen.colorMenu.transparency": "transparency",
    "pen.penDown": "pen down",
    "pen.penUp": "pen up",
    "pen.setColor": "set pen color to [COLOR]",
    "pen.setColorParam": "set pen [COLOR_PARAM] to [VALUE]",
    "pen.setHue": "set pen color to [HUE]",
    "pen.setShade": "set pen shade to [SHADE]",
    "pen.setSize": "set pen size to [SIZE]",
    "pen.stamp": "stamp",
    "speech.defaultWhenIHearValue": "let''s go",
    "speech.extensionName": "Speech to Text",
    "speech.listenAndWait": "listen and wait",
    "speech.speechReporter": "speech",
    "speech.whenIHear": "when I hear [PHRASE]",
    "text2speech.alto": "alto",
    "text2speech.categoryName": "Text to Speech",
    "text2speech.defaultTextToSpeak": "hello",
    "text2speech.giant": "giant",
    "text2speech.kitten": "kitten",
    "text2speech.setLanguageBlock": "set language to [LANGUAGE]",
    "text2speech.setVoiceBlock": "set voice to [VOICE]",
    "text2speech.speakAndWaitBlock": "speak [WORDS]",
    "text2speech.squeak": "squeak",
    "text2speech.tenor": "tenor",
    "translate.categoryName": "Translate",
    "translate.defaultTextToTranslate": "hello",
    "translate.translateBlock": "translate [WORDS] to [LANGUAGE]",
    "translate.viewerLanguage": "language",
    "videoSensing.categoryName": "Video Sensing",
    "videoSensing.direction": "direction",
    "videoSensing.motion": "motion",
    "videoSensing.off": "off",
    "videoSensing.on": "on",
    "videoSensing.onFlipped": "on flipped",
    "videoSensing.setVideoTransparency": "set video transparency to [TRANSPARENCY]",
    "videoSensing.sprite": "sprite",
    "videoSensing.stage": "stage",
    "videoSensing.videoOn": "video [ATTRIBUTE] on [SUBJECT]",
    "videoSensing.videoToggle": "turn video [VIDEO_STATE]",
    "videoSensing.whenMotionGreaterThan": "when video motion > [REFERENCE]",
    "wedo2.getDistance": "distance",
    "wedo2.getTiltAngle": "tilt angle [TILT_DIRECTION]",
    "wedo2.isTilted": "tilted [TILT_DIRECTION_ANY]?",
    "wedo2.motorDirection.backward": "that way",
    "wedo2.motorDirection.forward": "this way",
    "wedo2.motorDirection.reverse": "reverse",
    "wedo2.motorId.a": "motor A",
    "wedo2.motorId.all": "all motors",
    "wedo2.motorId.b": "motor B",
    "wedo2.motorId.default": "motor",
    "wedo2.motorOff": "turn [MOTOR_ID] off",
    "wedo2.motorOn": "turn [MOTOR_ID] on",
    "wedo2.motorOnFor": "turn [MOTOR_ID] on for [DURATION] seconds",
    "wedo2.playNoteFor": "play note [NOTE] for [DURATION] seconds",
    "wedo2.setLightHue": "set light color to [HUE]",
    "wedo2.setMotorDirection": "set [MOTOR_ID] direction to [MOTOR_DIRECTION]",
    "wedo2.startMotorPower": "set [MOTOR_ID] power to [POWER]",
    "wedo2.tiltDirection.any": "any",
    "wedo2.tiltDirection.down": "down",
    "wedo2.tiltDirection.left": "left",
    "wedo2.tiltDirection.right": "right",
    "wedo2.tiltDirection.up": "up",
    "wedo2.whenDistance": "when distance [OP] [REFERENCE]",
    "wedo2.whenTilted": "when tilted [TILT_DIRECTION_ANY]",
    "arduino.variable_create": "Create[TYPE][NAME] as [VALUE]",
    "arduino.digital_write": "Set Digital Pin [PIN] to [LEVEL]",
    "arduino.serial_begin": "Set Serial Port Baud Rate [Baud]",
    "arduino.serial_print": "Serial Output [VALUE] [NL]",
    "arduino.warp": "Wrap",
    "arduino.nowarp": "No Wrap",
    "arduino.pin_mode": "Set Pin[PIN] as [MODE]",
    "arduino.pwm_write": "Set PWM Pin [PIN] to [VALUE]",
    "arduino.servo_write": "Servo Write [PIN] Degree [DEGREE]",
    "arduino.digital_read": "Read Digital Pin [PIN]",
    "arduino.analog_read": "Read Analog Pin [PIN]",
    "arduino.systemUptime": "System Uptime (ms)",
    "arduino.whenDistanceLessThan": "When Distance < [DISTANCE]",
    "sensor.ultrasonicDistance": "Ultrasonic Distance [PORT]",
    "sensor.ultrasonicDistance2W": "Read HC-SR04 Ultrasonic Distance Sensor (cm) | Trig[TRIG]Echo[ECHO]",
    "sensor.ultrasonicDistanceNP": "NewPing Read HC-SR04 Ultrasonic Distance Sensor (cm) | Trig[TRIG]Echo[ECHO]",
    "sensor.infraredTrack": "IR Reflect [MODE] [PORT]",
    "sensor.temperature": "Temperature [PORT]",
    "sensor.humidity": "Humidity [PORT]",
    "motor.motorStop": "Motor Stop",
    "motor.motorControl": "Motor L [DIRL] [POWERL] & Motor R [DIRR] [POWERR]",
    "arduino.pinMode.Input": "Input",
    "arduino.pinMode.Output": "Output",
    "arduino.pinLevel.low": "Low",
    "arduino.pinLevel.high": "High",
    "motor.motorDir.forward": "Forward",
    "motor.motorDir.backward": "Backward",
    "sensor.portMode.1": "Port 1 (Digital)",
    "sensor.portMode.2": "Port 2 (Digital)",
    "sensor.portMode.3": "Port 3 (Analog)",
    "sensor.portMode.4": "Port 4 (Analog)",
    "sensor.portMode.5": "Port 5 (Analog)",
    "sensor.portMode.6": "Port 6 (Analog)",
    "sensor.portMode.7": "Port 7 (PWM)",
    "sensor.portMode.8": "Port 8 (PWM)",
    "arduino.variableType.integer": "Integer",
    "arduino.variableType.long": "Long",
    "arduino.variableType.double": "Double",
    "arduino.variableType.float": "Float",
    "arduino.variableType.byte": "Byte",
    "arduino.variableType.char": "Char",
    "arduino.variableType.string": "String",
    "sensor.dataType.digital": "digital",
    "sensor.dataType.analog": "analog",
    "arduino.pin.0": "0",
    "arduino.pin.1": "1",
    "arduino.pin.2": "2",
    "arduino.pin.3": "3",
    "arduino.pin.4": "4",
    "arduino.pin.5": "5",
    "arduino.pin.6": "6",
    "arduino.pin.7": "7",
    "arduino.pin.8": "8",
    "arduino.pin.9": "9",
    "arduino.pin.10": "10",
    "arduino.pin.11": "11",
    "arduino.pin.12": "12",
    "arduino.pin.13": "13",
    "arduino.pin.A0": "A0",
    "arduino.pin.A1": "A1",
    "arduino.pin.A2": "A2",
    "arduino.pin.A3": "A3",
    "arduino.pin.A4": "A4",
    "arduino.pin.A5": "A5",
    "arduino.baudrate.9600": "9600",
    "arduino.baudrate.19200": "19200",
    "arduino.baudrate.38400": "38400",
    "arduino.baudrate.57600": "57600",
    "arduino.baudrate.115200": "115200",
    "sensor.dht11": "Read DHT11 Temperature/Humidity Sensor | Out [PIN] [TYPE]",
    "sensor.sharp_ir": "Read Sharp GP2Y0A21YK0F IR Distance Sensor (mm)| Vo [PIN]",
    "sensor.DS1302_setup": "Set DS1302 CLK pin [CLK] DAT pin [DAT] RST pin [RST]",
    "sensor.DS1302": "Adjust the DS1302 time to [YEAR] Year [MONTH] Month [DATE] Date [HOUR] Hour [MINUTE] Minute [SECOND] Second",
    "sensor.getDS1302": "Get DS1302 Time [TYPE]",
    "sensor.pin.0": "0",
    "sensor.pin.1": "1",
    "sensor.pin.2": "2",
    "sensor.pin.3": "3",
    "sensor.pin.4": "4",
    "sensor.pin.5": "5",
    "sensor.pin.6": "6",
    "sensor.pin.7": "7",
    "sensor.pin.8": "8",
    "sensor.pin.9": "9",
    "sensor.pin.10": "10",
    "sensor.pin.11": "11",
    "sensor.pin.12": "12",
    "sensor.pin.13": "13",
    "sensor.pin.A0": "A0",
    "sensor.pin.A1": "A1",
    "sensor.pin.A2": "A2",
    "sensor.pin.A3": "A3",
    "sensor.pin.A4": "A4",
    "sensor.pin.A5": "A5",
    "sensor.dht11.temperature": "temperature",
    "sensor.dht11.humidity": "humidity",
    "display.lcdAddress": "Init I2C 16x2 LCD (PCF8574)| SDA [VALUE1] SCL[VALUE2] Addr[VALUE]",
    "display.lcdDisplay": "Set I2C 16x2 LCD (PCF8574)| [VALUE] Row [ROW]",
    "display.lcdDisplayXY": "Set I2C 16x2 LCD (PCF8574)| [VALUE] Column [XPos] Row [YPos]",
    "display.lcdClear": "Reset I2C 16x2 LCD (PCF8574)",
    "sensor.button": "pin [PIN] button pressed?",
    "display.initOneBitSegment": "Init 1 Bit SSD | [COM_TYPE] A[PIN_A] B[PIN_B] C[PIN_C] D[PIN_D] E[PIN_E] F[PIN_F] G[PIN_G] DP[PIN_DP] COM[PIN_COM]",
    "display.oneBitSegment": "Set 1 Bit SSD | [PIN] to [VALUE]",
    "display.segmentDisplay": " Set 1 Bit SSD | [NUM]",
    "display.segmentDisplayTwoDigits": "Set 2 Bit SSD (Mux) | [NUM] Left Most Zero[LEADING_ZERO] Left Most DP[LEFT_DP] Right Most DP[RIGHT_DP]",
    "display.segmentDisplayTwoDigitsDP": "Set 2 Bit SSD (Mux) | Left Most DP[LEFT_DP] Right Most DP[RIGHT_DP]",
    "display.reset2BitSSDMux": "Reset 2 Bit SSD (Mux)",
    "display.segmentDisplayDot": "Set 1 Bit SSD | DP[BOOLVAL]",
    "display.initTwoBitSegment": "Init 2 Bit SSD | [COM_TYPE] A[PIN_A] B[PIN_B] C[PIN_C] D[PIN_D] E[PIN_E] F[PIN_F] G[PIN_G] DP[PIN_DP] COM1[PIN_COM1] COM2[PIN_COM2]",
    "display.twoBitSegment": "Set 2 Bit SSD | [PIN] to [VALUE]",
    "display.cathode": "Cathode",
    "display.anode": "Anode",
    "display.init2BitSegmentLatch": "Init 2x1 Bit SSD (74HC595) | [COM_TYPE] Data[DATA_PIN] Latch[LATCH_PIN] Clock[CLOCK_PIN]",
    "display.segmentDisplayLatch": "Set 2x1 Bit SSD (74HC595) | [NUM] Left Most Zero[LEADING_ZERO] Left Most DP[LEFT_DP] Right Most DP[RIGHT_DP]",
    "display.reset2BitSegmentLatch": "Reset 2 Bit SSD (74HC595)",
    "display.initTM16374DigitDisplay": "Init 4 Bit SSD (TM1637) | CLK [CLK_PIN] DIO [DIO_PIN]",
    "display.TM1637Display": "Set 4 Bit SSD (TM1637) | [NUM] Colon[DOT_STATUS] Left Most Zero[LEADING_ZERO]",
    "display.resetTM1637Display": "Reset 4 Bit SSD (TM1637)",
    "sensor.timeType.year": "year",
    "sensor.timeType.month": "month",
    "sensor.timeType.date": "date",
    "sensor.timeType.hour": "hour",
    "sensor.timeType.minute": "minute",
    "sensor.timeType.second": "second",
    "sensor.timeType.day": "day",
    "display.segment.A": "A",
    "display.segment.B": "B",
    "display.segment.C": "C",
    "display.segment.D": "D",
    "display.segment.E": "E",
    "display.segment.F": "F",
    "display.segment.G": "G",
    "display.segment.DP": "DP",
    "display.segment.COM": "COM",
    "display.segment.COM1": "COM1",
    "display.segment.COM2": "COM2",
    "sensor.boolTrue": "True",
    "sensor.boolFalse": "False",
    "display.boolTrue": "True",
    "display.boolFalse": "False",
    "sensor.pinLevel.low": "Low",
    "sensor.pinLevel.high": "High",
    "sensor.roboRaveTaskType.basic": "Basic",
    "sensor.roboRaveTaskType.pro": "Pro",
    "sensor.direction.left": "Left",
    "sensor.direction.right": "Right",
    "sensor.vectorType.foundTheVector": "Found The Vector",
    "sensor.vectorType.errorOrNothingDetected": "Error Or Nothing Detected",
    "sensor.vectorType.arrowPointingUp": "Arrow Pointing Up",
    "sensor.vectorType.intersectionIsPresent": "Intersection Is Present",
    "sensor.vectorType.foundIntersection": "Found Intersection",
    "sensor.pixy2Command.refreshData": "Refresh Data In Tracking Mode",
    "sensor.pixy2Command.calcHeadingErrorPixy2": "Calculate Left And Right Wheel Speed",
    "sensor.pixy2Command.slowDown": "Slow Down",
    "sensor.pixy2Command.boost": "Boost",
    "sensor.pixy2Command.reverseVector": "Reverse Vector",
    "sensor.setServoDegree": "Set Pin [PIN] Servo To [DEGREE] Degree",
    "sensor.initPixy2": "Init Pixy2",
    "sensor.setPixy2TaskType": "Set RoboRave Task Type[TASK_TYPE]",
    "sensor.refreshDataInTrackingModeFromPixy2": "Pixy2 [PIXY2_COMMAND]",
    "sensor.pixy2FoundTheVector": "Pixy2 [FOUND_VECTOR]?",
    "sensor.getVectorLocation": "Pixy2 Get [AXIS] location of the [DIRECTION] of the Vector or line",
    "sensor.mecanumWheelSpeed": "set mecanum wheel [WHICH] [DIRECT] speed [SPEED]",
    "sensor.axis.x": "x",
    "sensor.vectorDirect.head": "head(arrow end)",
    "sensor.which.rightfront": "right front",
    "sensor.which.leftfront": "left front",
    "sensor.which.rightback": "right back",
    "sensor.which.leftback": "left back",
    "sensor.wheeldirect.forward": "forward",
    "sensor.wheeldirect.reverse": "reverse",
    "sensor.mecanumWheelStatus": "mecanum [STATUS] speed [SPEED]",
    "sensor.wheelstatus.forward": "forward",
    "sensor.wheelstatus.back": "back",
    "sensor.wheelstatus.stop": "stop",
    "keypad.initKeypad4X3": "Init 4x3 Keypad | R1[ROW_1] R2[ROW_2] R3[ROW_3] R4[ROW_4] C1[COLUMN_1] C2[COLUMN_2] C3[COLUMN_3]",
    "keypad.gotKeyValue": "Got a key value?",
    "keypad.keyValue": "Key Value"
}
